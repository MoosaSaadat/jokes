{"version":3,"sources":["DadJokes/Joke.js","DadJokes/JokesList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleUpvote","bind","assertThisInitialized","handleDownvote","handleVotes","id","votes","react_default","a","createElement","className","onClick","style","color","getColor","borderBottom","concat","joke","getEmoji","Component","JokesList","state","jokes","JSON","parse","window","localStorage","getItem","isLoading","existingJokes","Set","map","j","handleClick","length","setState","getNewJokes","jokesToFetch","axios","get","headers","Accept","res","data","objectSpread","has","push","add","st","toConsumableArray","setItem","stringify","_this2","alert","_context","t0","_this3","_this4","c","src_DadJokes_Joke","key","role","aria-label","defaultProps","App","src_DadJokes_JokesList","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19034375.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Joke.css';\r\n\r\nclass Joke extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleUpvote = this.handleUpvote.bind(this);\r\n    this.handleDownvote = this.handleDownvote.bind(this);\r\n  }\r\n  handleUpvote () {\r\n    this.props.handleVotes(this.props.id, 1);\r\n  }\r\n  handleDownvote () {\r\n    this.props.handleVotes(this.props.id, -1);\r\n  }\r\n  getEmoji() {\r\n    if (this.props.votes >= 15) return \"😂\";\r\n    else if (this.props.votes >= 12) return \"😁\";\r\n    else if (this.props.votes >= 9) return \"😃\";\r\n    else if (this.props.votes >= 6) return \"😎\";\r\n    else if (this.props.votes >= 3) return \"😊\";\r\n    else if (this.props.votes >= 0) return \"😕\";\r\n    else return \"😠\";\r\n  }\r\n  getColor() {\r\n    if (this.props.votes >= 15) return \"#4CAF50\";\r\n    else if (this.props.votes >= 12) return \"#8BC34A\";\r\n    else if (this.props.votes >= 9) return \"#CDDC39\";\r\n    else if (this.props.votes >= 6) return \"#FFEB3B\";\r\n    else if (this.props.votes >= 3) return \"#FFC107\";\r\n    else if (this.props.votes >= 0) return \"#FF9800\";\r\n    else return \"#F44336\";\r\n  }\r\n  render () {\r\n    return (\r\n      <tr className=\"Joke\">\r\n        <td>\r\n          <div className=\"Joke-points\">\r\n            <button className=\"fas fa-arrow-up\" onClick={this.handleUpvote} />\r\n            <h3 style={{color: this.getColor(),\r\n                        borderBottom: `2px solid ${this.getColor()}`}}>\r\n              {this.props.votes}\r\n            </h3>\r\n            <button className=\"fas fa-arrow-down\" onClick={this.handleDownvote} />\r\n          </div>\r\n        </td>\r\n        <td>\r\n          {this.props.joke}\r\n        </td>\r\n        <td>\r\n          <span>\r\n            {this.getEmoji()}\r\n          </span>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Joke;\r\n","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport Joke from './Joke'\r\nimport './JokesList.css';\r\n\r\nclass JokesList extends Component {\r\n  static defaultProps = {\r\n    jokesToFetch: 10,\r\n  }\r\n  constructor (props) {\r\n    super(props);\r\n    this.state = {\r\n      jokes: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"),\r\n      isLoading: false\r\n    }\r\n    this.existingJokes = new Set(this.state.jokes.map(j => j.id));\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleVotes = this.handleVotes.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    if (this.state.jokes.length === 0) {\r\n      this.setState({isLoading: true});\r\n      this.getNewJokes();\r\n    }\r\n  }\r\n  async getNewJokes () {\r\n    try {\r\n      let jokes = [];\r\n      while (jokes.length < this.props.jokesToFetch) {\r\n        let res = await axios.get(\"https://icanhazdadjoke.com/\", {headers:\r\n          { Accept: \"application/json\"}\r\n        });\r\n        res.data = {...res.data, votes: 0};\r\n        if (!this.existingJokes.has(res.data.id)) {\r\n          jokes.push(res.data);\r\n          this.existingJokes.add(res.data.id);\r\n        }\r\n      }\r\n      this.setState(st => ({ isLoading: false, jokes: [...st.jokes, ...jokes]}),\r\n      () => window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes)));\r\n    } catch (e) {\r\n      this.setState({isLoading: false});\r\n      alert(e);\r\n    }\r\n  }\r\n  handleClick () {\r\n    this.setState({isLoading: true}, this.getNewJokes);\r\n  }\r\n  handleVotes (id, add) {\r\n    this.setState(st => ({\r\n      jokes: st.jokes.map(j =>\r\n          j.id === id ? {...j, votes: j.votes + add} : j)\r\n    }),\r\n    () => window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes)));\r\n  }\r\n  render() {\r\n    const jokes = this.state.jokes.map(c => {\r\n      return <Joke key={c.id}\r\n                  id={c.id}\r\n                  votes={c.votes}\r\n                  joke={c.joke}\r\n                  handleVotes={this.handleVotes} />\r\n    });\r\n    return (\r\n      <div className=\"JokesList\">\r\n        <div className=\"JokesList-header\">\r\n          <span role=\"img\" aria-label=\"emoji\" className=\"JokesList-emoji\">&#128514;</span>\r\n          <h1 className=\"JokesList-title\">Jokes List</h1>\r\n          <h3 className=\"JokesList-title subtitle\">\r\n            You don't need to read the best jokes to smile...\r\n          </h3>\r\n        </div>\r\n        <div className=\"JokesList-list\">\r\n          <table>\r\n            <tbody>\r\n              {jokes}\r\n            </tbody>\r\n          </table>\r\n          {\r\n            this.state.isLoading\r\n            ? (<i className=\"far fa-2x fa-laugh fa-spin loader\" />)\r\n            : (\r\n              <button className=\"btn\" onClick={this.handleClick}>\r\n                Get More Jokes?\r\n              </button>\r\n            )\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default JokesList;\r\n","import React from 'react';\nimport JokesList from './DadJokes/JokesList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokesList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}